// Generated by CoffeeScript 1.10.0
(function() {
  "Model";
  var A, B, C, E, H, M, Model, isAlive;

  M = {};

  _first.offer('model', M);

  A = _first.request('assets');

  B = _first.request('beam');

  C = _first.request('config');

  E = _first.request('entity');

  H = _first.request('helper');

  Model = (function() {
    Model.prototype.player = null;

    Model.prototype.gameOver = false;

    Model.prototype.bg = [];

    Model.prototype.bases = [];

    Model.prototype.ships = [];

    Model.prototype.boats = [];

    Model.prototype.rocks = [];

    Model.prototype.booms = [];

    Model.prototype.flashes = [];

    Model.prototype.shots = [];

    Model.prototype.loot = [];

    function Model() {
      "Build the initial state.";
      this.player = E.PlayerShip();
      this.ships.push(this.player);
      this.flash(this.player);
      this.rocks.push(new E.RandRock());
      this.bases.push(new E.LuckyBase());
      this.bases.push(new E.BuildBase());
      this.bg.push(new E.BgTile());
    }

    Model.prototype.getEntityLists = function() {
      return [this.bg, this.bases, this.loot, this.boats, this.shots, this.rocks, this.ships, this.booms, this.flashes];
    };

    Model.prototype.update = function(dt) {
      "update by dt";
      var base, i, item, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, list, m, n, o, p, ref, ref1, ref2, ref3, ref4, ref5, ref6, rock, ship, shot;
      ref = this.getEntityLists();
      for (i = 0, len = ref.length; i < len; i++) {
        list = ref[i];
        for (j = 0, len1 = list.length; j < len1; j++) {
          item = list[j];
          item.update(dt);
        }
      }
      ref1 = this.ships;
      for (k = 0, len2 = ref1.length; k < len2; k++) {
        ship = ref1[k];
        ref2 = this.rocks;
        for (l = 0, len3 = ref2.length; l < len3; l++) {
          rock = ref2[l];
          if (ship.collide(rock)) {
            ship.bounce(rock);
          }
        }
      }
      ref3 = this.bases;
      for (m = 0, len4 = ref3.length; m < len4; m++) {
        base = ref3[m];
        ref4 = this.rocks;
        for (n = 0, len5 = ref4.length; n < len5; n++) {
          rock = ref4[n];
          if (base.collide(rock)) {
            rock.bounce(base);
          }
        }
      }
      ref5 = this.shots;
      for (o = 0, len6 = ref5.length; o < len6; o++) {
        shot = ref5[o];
        if (shot.damaging) {
          ref6 = this.rocks;
          for (p = 0, len7 = ref6.length; p < len7; p++) {
            rock = ref6[p];
            if (shot.hit(rock)) {
              if (rock.applyDamage(shot.getDamage())) {
                rock.kill();
                this.explode(rock);
                this.calveRock(rock);
              }
            }
          }
        }
      }
      if (E.spawnRock(dt)) {
        rock = new E.RandRock();
        this.rocks.push(rock);
        this.flash(rock);
      }
      this.shots = _.filter(this.shots, isAlive);
      this.rocks = _.filter(this.rocks, isAlive);
      this.ships = _.filter(this.ships, isAlive);
      this.booms = _.filter(this.booms, isAlive);
      this.flashes = _.filter(this.flashes, isAlive);
      if (!this.player.alive) {
        return this.gameOver = true;
      }
    };

    Model.prototype.draw = function(ctx) {
      "Draw the model.";
      var entity, i, len, list, ref, results;
      this.player.centerCamera();
      ref = this.getEntityLists();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        list = ref[i];
        results.push((function() {
          var j, len1, results1;
          results1 = [];
          for (j = 0, len1 = list.length; j < len1; j++) {
            entity = list[j];
            results1.push(entity.draw(ctx));
          }
          return results1;
        })());
      }
      return results;
    };

    Model.prototype.command = function(cmd) {
      if (cmd === 1) {
        return this.player.va = C.shipAngVel;
      } else if (cmd === 2) {
        return this.player.va = -C.shipAngVel;
      } else if (cmd === 3) {
        return this.player.setAcc(C.shipAcc);
      } else if (cmd === 4) {
        return this.player.setAcc(-C.shipRetro);
      } else if (cmd === 5) {
        return this.fireDisruptor(this.player);
      } else if (cmd === 11) {
        return this.player.va = 0;
      } else if (cmd === 13) {
        return this.player.setAcc(0);
      } else if (cmd === 99) {
        this.player.kill();
        return this.explode(this.player);
      }
    };

    Model.prototype.fireDisruptor = function(ship) {
      if (true) {
        return this.shots.push(B.newDisruptor(ship));
      }
    };

    Model.prototype.calveRock = function(rock) {
      var calf, calves, i, len, results;
      calves = E.calveRock(rock);
      if (calves) {
        results = [];
        for (i = 0, len = calves.length; i < len; i++) {
          calf = calves[i];
          results.push(this.rocks.push(calf));
        }
        return results;
      }
    };

    Model.prototype.explode = function(obj) {
      return this.booms.push(E.newExplosionOnObj(obj));
    };

    Model.prototype.flash = function(obj) {
      return this.flashes.push(E.newFlashOnObj(obj));
    };

    return Model;

  })();

  M.Model = Model;

  isAlive = function(obj) {
    return obj.alive;
  };

}).call(this);
