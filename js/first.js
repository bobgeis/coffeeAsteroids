// Generated by CoffeeScript 1.10.0
(function() {
  "_first\n\nUsed to pass modules to one another without add lots to window";
  var F, _first, appliedModules, offeredModules, requestedModules, root;

  F = _first = {};

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root._first = _first;

  offeredModules = {};

  requestedModules = {};

  appliedModules = {};

  document.write('<script src="js/scripts.js"></script>');

  F.request = function(name) {
    if (!requestedModules[name]) {
      requestedModules[name] = {};
      appliedModules[name] = false;
    }
    return requestedModules[name];
  };

  F.offer = function(name, module) {
    if (offeredModules[name]) {
      return console.log("namespace collision: " + name);
    } else {
      return offeredModules[name] = module;
    }
  };

  F.applyModule = function(name) {
    var key, ref, value;
    if (!offeredModules[name]) {
      console.log("module never offered: " + name);
      return false;
    }
    if (!requestedModules[name]) {
      console.log("module never requested: " + name);
      return false;
    }
    if (appliedModules[name]) {
      console.log("module already applied: " + name);
      return false;
    }
    ref = offeredModules[name];
    for (key in ref) {
      value = ref[key];
      requestedModules[name][key] = value;
    }
    appliedModules[name] = true;
    return true;
  };

  F.applyAllModules = function() {
    var module, name;
    console.log("applying modules");
    for (name in offeredModules) {
      module = offeredModules[name];
      F.applyModule(name);
    }
    return F.checkAllModulesApplied();
  };

  F.checkAllModulesApplied = function() {
    var allApplied, applied, name;
    allApplied = true;
    for (name in appliedModules) {
      applied = appliedModules[name];
      if (!applied) {
        console.log("module not applied: " + name);
        allApplied = false;
      }
    }
    return allApplied;
  };

  console.log("_first!");

}).call(this);
