// Generated by CoffeeScript 1.10.0
(function() {
  "Hud\n\nThese are parts of the \"Heads Up Display\".\nThey represent things shown on the screen to the player that aren't directly\npart of the game world.  For example a readout of the player's shields.\n";
  var A, BarGraph, C, CargoMonitor, DockMessage, H, MessageWindow, PlayMessage, U,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  U = {};

  _first.offer('hud', U);

  A = _first.request('assets');

  C = _first.request('config');

  H = _first.request('helper');

  BarGraph = (function() {
    function BarGraph(name, obj, field, fieldMax, colorEmpty, colorFull, x1, y1) {
      this.name = name;
      this.obj = obj;
      this.field = field;
      this.fieldMax = fieldMax;
      this.colorEmpty = colorEmpty;
      this.colorFull = colorFull;
      this.x = x1;
      this.y = y1;
    }

    BarGraph.prototype.draw = function(ctx) {
      var color, percent, ratio;
      ratio = this.getRatio();
      color = this.getColor(ratio);
      ctx.fillStyle = color;
      ctx.font = "10px Arial";
      ctx.fillText(this.name, this.x, this.y);
      percent = Math.floor(100 * ratio);
      ctx.lineWidth = 5;
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y + 10);
      ctx.lineTo(this.x + percent, this.y + 10);
      ctx.stroke();
      ctx.closePath();
      return ctx.fillText(percent + "%", this.x + 75, this.y);
    };

    BarGraph.prototype.getRatio = function() {
      return 1 - Math.min(1, this.obj[this.field] / this.obj[this.fieldMax]);
    };

    BarGraph.prototype.update = function(dt) {};

    BarGraph.prototype.getColor = function(ratio) {
      var colors, i, j;
      colors = [];
      for (i = j = 0; j < 4; i = ++j) {
        colors.push(Math.floor((this.colorFull[i] - this.colorEmpty[i]) * ratio + this.colorEmpty[i]));
      }
      return "rgba(" + colors[0] + "," + colors[1] + "," + colors[2] + "," + colors[3] + ")";
    };

    return BarGraph;

  })();

  U.shipShieldBar = function(ship) {
    var bar, dangerColor, safeColor;
    safeColor = [100, 150, 255, 1.0];
    dangerColor = [255, 100, 200, 1.0];
    bar = new BarGraph("Shields", ship, "damage", "maxDamage", dangerColor, safeColor, 10, 10);
    return bar;
  };

  U.shipBeamEnergyBar = function(ship) {
    var bar, emptyColor, fullColor;
    fullColor = [50, 250, 250, 1.0];
    emptyColor = [255, 100, 50, 1.0];
    bar = new BarGraph("Charge", ship, "beamEnergy", "beamEnergyMax", emptyColor, fullColor, 10, 40);
    return bar;
  };

  U.shipFuelBar = function(ship) {
    var bar, emptyColor, fullColor;
    fullColor = [100, 255, 100, 1.0];
    emptyColor = [255, 200, 0, 1.0];
    bar = new BarGraph("Core", ship, "fuel", "fuelMax", emptyColor, fullColor, 10, 70);
    return bar;
  };

  PlayMessage = (function() {
    function PlayMessage(message, x1, y1, visible, size, color1) {
      this.message = message;
      this.x = x1;
      this.y = y1;
      this.visible = visible != null ? visible : true;
      this.size = size != null ? size : 15;
      this.color = color1 != null ? color1 : "#FFFFFF";
    }

    PlayMessage.prototype.update = function(dt) {};

    PlayMessage.prototype.draw = function(ctx) {
      if (this.visible) {
        return H.drawText(ctx, this.message, this.x, this.y, this.size, this.color);
      }
    };

    return PlayMessage;

  })();

  DockMessage = (function(superClass) {
    extend(DockMessage, superClass);

    function DockMessage(player1) {
      this.player = player1;
      DockMessage.__super__.constructor.call(this, "Hold [Enter] to dock.", C.winWid / 2, C.winHei / 2 + 130);
    }

    DockMessage.prototype.draw = function(ctx) {
      if (this.player.canDock && this.player.alive) {
        return H.drawText(ctx, this.message, this.x, this.y, this.size, this.color);
      }
    };

    return DockMessage;

  })(PlayMessage);

  U.dockMessage = function(player) {
    return new DockMessage(player);
  };

  MessageWindow = (function() {
    function MessageWindow(dx1, dy1, bgColor, fgColor) {
      this.dx = dx1;
      this.dy = dy1;
      this.bgColor = bgColor;
      this.fgColor = fgColor;
      this.bodyText = "";
      this.headerText = "";
      this.footerText = "";
    }

    MessageWindow.prototype.update = function(dt) {};

    MessageWindow.prototype.draw = function(ctx) {
      var cx, cy;
      ctx.fillStyle = this.bgColor;
      cx = ctx.canvas.width / 2;
      cy = ctx.canvas.height / 2;
      ctx.fillRect(cx - this.dx / 2, cy - this.dy / 2, this.dx, this.dy);
      ctx.strokeStyle = this.fgColor;
      ctx.lineWidth = 1;
      return ctx.strokeRect(cx - this.dx / 2, cy - this.dy / 2, this.dx, this.dy);
    };

    MessageWindow.prototype.setBodyText = function(bodyText) {
      this.bodyText = bodyText;
    };

    MessageWindow.prototype.setHeaderText = function(headerText) {
      this.headerText = headerText;
    };

    MessageWindow.prototype.setFooterText = function(footerText) {
      this.footerText = footerText;
    };

    return MessageWindow;

  })();

  U.dockMessageWindow = function() {
    var msg;
    msg = new MessageWindow(600, 400, '#000030', '#FFFFFF');
    msg.setBodyText("text");
    return msg;
  };

  CargoMonitor = (function() {
    function CargoMonitor(cargo1, x1, y1) {
      this.cargo = cargo1;
      this.x = x1;
      this.y = y1;
      this.types = ["crystal", "lifepod", "mousepod"];
      this.show = {
        crystal: [false, false, false],
        lifepod: [false, false, false],
        mousepod: [false, false, false]
      };
      this.imgs = {
        crystal: A.img.crystal[0],
        lifepod: A.img.lifepod[0],
        mousepod: A.img.mousepod[0]
      };
    }

    CargoMonitor.prototype.update = function(dt) {
      var j, len, ref, results, type;
      ref = this.types;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        if (this.cargo[type][0] > 0) {
          results.push(this.show[type][0] = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    CargoMonitor.prototype.draw = function(ctx) {
      var dx, dy, j, len, ref, string, type;
      dx = 10;
      dy = 0;
      ref = this.types;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        if (this.show[type][0]) {
          H.drawImgStill(ctx, this.imgs[type], this.x, this.y + dy - 4);
          string = this.cargo[type][0] + "  /  " + this.cargo[type][1];
          ctx.fillStyle = "rgba(100,255,255,1)";
          ctx.font = "10px Arial";
          ctx.fillText(string, this.x + dx, this.y + dy);
          dy += 12;
        }
      }
    };

    return CargoMonitor;

  })();

  U.newCargoMonitor = function(cargo) {
    var x, y;
    x = 10;
    y = 100;
    return new CargoMonitor(cargo, x, y);
  };

}).call(this);
