// Generated by CoffeeScript 1.10.0
(function() {
  "Hud\n\nThese are parts of the \"Heads Up Display\".\nThey represent things shown on the screen to the player that aren't directly\npart of the game world.  For example a readout of the player's shields.\n";
  var BarGraph, C, DockMessage, H, MessageWindow, PlayMessage, U, drawText,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  U = {};

  _first.offer('hud', U);

  C = _first.request('config');

  H = _first.request('helper');

  BarGraph = (function() {
    function BarGraph(name, obj, field, fieldMax, colorEmpty, colorFull, x1, y1) {
      this.name = name;
      this.obj = obj;
      this.field = field;
      this.fieldMax = fieldMax;
      this.colorEmpty = colorEmpty;
      this.colorFull = colorFull;
      this.x = x1;
      this.y = y1;
    }

    BarGraph.prototype.draw = function(ctx) {
      var color, percent, ratio;
      ratio = this.getRatio();
      color = this.getColor(ratio);
      ctx.fillStyle = color;
      ctx.font = "10px Arial";
      ctx.fillText(this.name, this.x, this.y);
      percent = Math.floor(100 * ratio);
      ctx.lineWidth = 5;
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y + 10);
      ctx.lineTo(this.x + percent, this.y + 10);
      ctx.stroke();
      ctx.closePath();
      return ctx.fillText(percent + "%", this.x + 75, this.y);
    };

    BarGraph.prototype.getRatio = function() {
      return 1 - Math.min(1, this.obj[this.field] / this.obj[this.fieldMax]);
    };

    BarGraph.prototype.update = function(dt) {};

    BarGraph.prototype.getColor = function(ratio) {
      var colors, i, j;
      colors = [];
      for (i = j = 0; j < 4; i = ++j) {
        colors.push(Math.floor((this.colorFull[i] - this.colorEmpty[i]) * ratio + this.colorEmpty[i]));
      }
      return "rgba(" + colors[0] + "," + colors[1] + "," + colors[2] + "," + colors[3] + ")";
    };

    return BarGraph;

  })();

  U.shipShieldBar = function(ship) {
    var bar, dangerColor, safeColor;
    safeColor = [100, 160, 255, 1.0];
    dangerColor = [255, 100, 150, 1.0];
    bar = new BarGraph("Shields", ship, "damage", "maxDamage", dangerColor, safeColor, 10, 10);
    return bar;
  };

  U.shipBeamEnergyBar = function(ship) {
    var bar, emptyColor, fullColor;
    fullColor = [50, 250, 250, 1.0];
    emptyColor = [255, 128, 0, 1.0];
    bar = new BarGraph("Charge", ship, "beamEnergy", "beamEnergyMax", emptyColor, fullColor, 10, 40);
    return bar;
  };

  U.shipFuelBar = function(ship) {
    var bar, emptyColor, fullColor;
    fullColor = [100, 255, 100, 1.0];
    emptyColor = [255, 175, 0, 1.0];
    bar = new BarGraph("Reactant", ship, "fuel", "fuelMax", emptyColor, fullColor, 10, 70);
    return bar;
  };

  PlayMessage = (function() {
    function PlayMessage(message, x1, y1, visible, size1, color1) {
      this.message = message;
      this.x = x1;
      this.y = y1;
      this.visible = visible != null ? visible : true;
      this.size = size1 != null ? size1 : 15;
      this.color = color1 != null ? color1 : "#FFFFFF";
    }

    PlayMessage.prototype.update = function(dt) {};

    PlayMessage.prototype.draw = function(ctx) {
      if (this.visible) {
        return drawText(ctx, this.message, this.x, this.y, this.size, this.color);
      }
    };

    return PlayMessage;

  })();

  DockMessage = (function(superClass) {
    extend(DockMessage, superClass);

    function DockMessage(player1) {
      this.player = player1;
      DockMessage.__super__.constructor.call(this, "Hold [Enter] to dock.", C.winWid / 2, C.winHei / 2 + 130);
    }

    DockMessage.prototype.draw = function(ctx) {
      if (this.player.canDock) {
        return drawText(ctx, this.message, this.x, this.y, this.size, this.color);
      }
    };

    return DockMessage;

  })(PlayMessage);

  U.dockMessage = function(player) {
    return new DockMessage(player);
  };

  drawText = function(ctx, text, x, y, size, color, font) {
    var w;
    if (size == null) {
      size = 15;
    }
    if (color == null) {
      color = "#FFFFFF";
    }
    if (font == null) {
      font = "Arial";
    }
    ctx.fillStyle = color;
    ctx.font = (Math.floor(size)) + "px " + font;
    w = Math.floor((ctx.measureText(text)).width / 2);
    return ctx.fillText(text, Math.floor(x) - w, Math.floor(y) - Math.floor(size));
  };

  MessageWindow = (function() {
    function MessageWindow(dx, dy, bgColor, fgColor) {
      this.dx = dx;
      this.dy = dy;
      this.bgColor = bgColor;
      this.fgColor = fgColor;
      this.bodyText = "";
      this.headerText = "";
      this.footerText = "";
    }

    MessageWindow.prototype.update = function(dt) {};

    MessageWindow.prototype.draw = function(ctx) {
      var cx, cy;
      ctx.fillStyle = this.bgColor;
      cx = ctx.canvas.width / 2;
      cy = ctx.canvas.height / 2;
      return ctx.fillRect(cx - this.dx / 2, cy - this.dy / 2, this.dx, this.dy);
    };

    MessageWindow.prototype.setBodyText = function(bodyText) {
      this.bodyText = bodyText;
    };

    MessageWindow.prototype.setHeaderText = function(headerText) {
      this.headerText = headerText;
    };

    MessageWindow.prototype.setFooterText = function(footerText) {
      this.footerText = footerText;
    };

    return MessageWindow;

  })();

  U.dockMessageWindow = function() {
    var msg;
    msg = new MessageWindow(400, 400, '#000000', '#FFFFFF');
    msg.setBodyText("text");
    return msg;
  };

}).call(this);
