// Generated by CoffeeScript 1.10.0
(function() {
  "Assets\n\nThis loads images and sound assets and puts them in objects for use.";
  var A, C, H, aM, loadImg, loadImgFolder, thingsLoaded, thingsToLoad;

  A = {};

  _first.offer('assets', A);

  aM = _first.request('assetMap');

  C = _first.request('config');

  H = _first.request('helper');

  A.img = {};

  A.snd = {};

  thingsToLoad = 0;

  thingsLoaded = 0;

  A.loadingFinished = function() {
    return thingsToLoad === thingsLoaded;
  };

  A.loadAllImgs = function() {
    var folder, j, len, ref, results;
    console.log("loading images");
    ref = aM.imgFolders;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      folder = ref[j];
      results.push(loadImgFolder(folder));
    }
    return results;
  };

  loadImgFolder = function(folder) {
    var name, ref, results, src;
    if (!aM[folder]) {
      console.log("Image folder: " + folder + " not found in assets.");
      return false;
    }
    A.img[folder] = {};
    ref = aM[folder];
    results = [];
    for (name in ref) {
      src = ref[name];
      results.push(loadImg(folder, name, src));
    }
    return results;
  };

  loadImg = function(folder, name, src) {
    var img;
    thingsToLoad++;
    img = new Image();
    img.src = src;
    return img.onload = function() {
      var ctx;
      ctx = H.createCanvas().getContext('2d');
      ctx.canvas.width = img.width;
      ctx.canvas.height = img.width;
      ctx.save();
      ctx.translate(img.width / 2, img.width / 2);
      ctx.rotate(H.HALFPI);
      ctx.drawImage(img, -img.width / 2, -img.width / 2);
      ctx.restore();
      thingsLoaded++;
      return A.img[folder][name] = ctx;
    };
  };

  A.afterLoad = function() {
    A.createBgTiles();
    A.createRocks();
    A.createBooms();
    A.createFlashes();
    A.createTracPulse();
    A.createCrystalList();
    return A.createLifepodList();
  };

  A.createBgTiles = function() {
    "create a starfield background";
    var ctx, i, j, k, l, m, pos, ref, ref1, ref2, ref3, star;
    A.img.bg = {};
    ctx = H.createCanvas().getContext('2d');
    ctx.canvas.width = C.tileSize;
    ctx.canvas.height = C.tileSize;
    for (i = j = 0, ref = C.tileCount * 10; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      star = A.img.star["d" + (H.getRandomListValue(C.spectralTypes))];
      pos = H.pt.random(C.tileSize, C.tileSize);
      H.drawImgStill(ctx, star, pos.x, pos.y);
    }
    for (i = k = 0, ref1 = Math.floor(C.tileCount); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      star = A.img.star["m" + (H.getRandomListValue(C.spectralTypes))];
      pos = H.pt.random(C.tileSize, C.tileSize);
      H.drawImgStill(ctx, star, pos.x, pos.y);
    }
    for (i = l = 0, ref2 = Math.floor(C.tileCount / 10); 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
      star = A.img.star["g" + (H.getRandomListValue(C.spectralTypes))];
      pos = H.pt.random(C.tileSize, C.tileSize);
      H.drawImgStill(ctx, star, pos.x, pos.y);
    }
    for (i = m = 0, ref3 = Math.floor(C.tileCount / 100); 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
      star = A.img.star["sg" + (H.getRandomListValue(C.spectralTypes))];
      pos = H.pt.random(C.tileSize, C.tileSize);
      H.drawImgStill(ctx, star, pos.x, pos.y);
    }
    return A.img.bg.tile = ctx;
  };

  A.createRocks = function() {
    var rock;
    rock = {
      C: A.createRockType("C"),
      S: A.createRockType("S"),
      M: A.createRockType("M")
    };
    return A.img.rock = rock;
  };

  A.createRockType = function(type) {
    var ctx, grad, j, k, len, len1, r, ratio, ratios, rockSize, rockType, sizes;
    sizes = C.rockRadii;
    rockType = [];
    ratios = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9];
    for (j = 0, len = sizes.length; j < len; j++) {
      r = sizes[j];
      rockSize = [];
      for (k = 0, len1 = ratios.length; k < len1; k++) {
        ratio = ratios[k];
        ctx = H.createCanvas().getContext('2d');
        ctx.canvas.width = r * 2;
        ctx.canvas.height = r * 2;
        grad = ctx.createRadialGradient(r / 2, r / 2, 1, r, r, r);
        grad.addColorStop(0, C.rockColor(ratio, type, 0));
        grad.addColorStop(1, C.rockColor(ratio, type, 1));
        ctx.fillStyle = grad;
        ctx.beginPath();
        ctx.arc(r, r, r, 0, H.TAU);
        ctx.fill();
        ctx.closePath();
        rockSize.push(ctx);
      }
      rockType.push(rockSize);
    }
    return rockType;
  };

  A.createBooms = function() {
    var boom, ctx, frames, grad, i, j, r, ref, vr;
    frames = C.boomMaxAge / C.timeStep;
    r = C.boomInitialRadius;
    vr = C.boomGrowthRate * C.timeStep;
    boom = [];
    for (i = j = 0, ref = frames; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      ctx = H.createCanvas().getContext('2d');
      ctx.canvas.width = r * 2;
      ctx.canvas.height = r * 2;
      grad = ctx.createRadialGradient(r, r, 1, r, r, r);
      grad.addColorStop(0, C.boomInnerColor(i / frames));
      grad.addColorStop(1, C.boomOuterColor(i / frames));
      ctx.fillStyle = grad;
      ctx.beginPath();
      ctx.arc(r, r, r, 0, H.TAU);
      ctx.fill();
      ctx.closePath();
      boom.push(ctx);
      r += vr;
    }
    A.img.boom = boom;
  };

  A.createFlashes = function() {
    var ctx, dr, flash, frames, grad, i, j, r, ref;
    frames = C.flashMaxAge / C.timeStep;
    r = C.flashInitialRadius;
    dr = C.flashShrinkRate * C.timeStep;
    flash = [];
    for (i = j = 0, ref = frames; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      ctx = H.createCanvas().getContext('2d');
      ctx.canvas.width = r * 2;
      ctx.canvas.height = r * 2;
      grad = ctx.createRadialGradient(r, r, 1, r, r, r);
      grad.addColorStop(0, C.flashInnerColor(i / frames));
      grad.addColorStop(1, C.flashOuterColor(i / frames));
      ctx.fillStyle = grad;
      ctx.beginPath();
      ctx.arc(r, r, r, 0, H.TAU);
      ctx.fill();
      ctx.closePath();
      flash.push(ctx);
      r += dr;
    }
    A.img.flash = flash;
  };

  A.createTracPulse = function() {
    var ctx, dr, frames, i, j, pulse, r, ref;
    frames = C.tracBeamColors.length;
    r = C.tracPulseInitialRadius;
    dr = C.tracPulseGrowthRate;
    pulse = [];
    for (i = j = 0, ref = frames; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      ctx = H.createCanvas().getContext('2d');
      ctx.canvas.width = r * 2;
      ctx.canvas.height = r * 2;
      ctx.fillStyle = C.tracBeamColors[i];
      ctx.beginPath();
      ctx.arc(r, r, r, 0, H.TAU);
      ctx.fill();
      ctx.closePath();
      pulse.push(ctx);
      r += dr;
    }
    A.img.tracPulse = pulse;
  };

  A.createCrystalList = function() {
    var crystal;
    crystal = [];
    crystal.push(A.img.space.cr3);
    crystal.push(A.img.space.cr2);
    crystal.push(A.img.space.cr1);
    crystal.push(A.img.space.cr0);
    return A.img.crystal = crystal;
  };

  A.createLifepodList = function() {
    var lifepod;
    lifepod = [];
    lifepod.push(A.img.space.lb3);
    lifepod.push(A.img.space.lb2);
    lifepod.push(A.img.space.lb1);
    lifepod.push(A.img.space.lb0);
    return A.img.lifepod = lifepod;
  };

}).call(this);
